# -*- coding: utf-8 -*-
"""
Created on Fri Aug 12 10:31:59 2016
     functions for the tuberculosis model
@author: alex
"""
import cProfile
import numpy.random as nr
#import matplotlib
import numpy as np
import random
#import matplotlib.pyplot as plt
import pdb
#import rpy2.robjects as robjects
import rpy2.robjects.packages as rpackages
import rpy2.robjects as robjects
from scipy.stats import itemfreq, gamma, norm
#from numba import jit
randtoolbox = rpackages.importr('randtoolbox')
StableEstim = rpackages.importr('StableEstim')


def simulator(theta):
        """
        Function that samples according to the birth death mutation process of Takana et al.
        :param theta: proposed parameter, obtained from the prior distribution simulation
        :param n_star: number of generated samples, in this function equal to one
        :return: freq_distinct_all : statistic for the observed genotype combination
        """
        # add random seed
        random_seed = random.randrange(10**9)
        np.random.seed(seed=random_seed)
        if True:
            y = np.random.multivariate_normal(mean=theta.squeeze(), cov = np.identity(theta.shape[0]))
        elif False:
            u = np.random.rand()
            if u < 0.5:
                y = np.random.multivariate_normal(mean=theta.squeeze(), cov = np.identity(theta.shape[0]))
            else:
                y = np.random.multivariate_normal(mean=theta.squeeze(), cov = np.identity(theta.shape[0]))
        else:
            y1 = np.random.multivariate_normal(mean=-theta.squeeze(), cov = np.identity(theta.shape[0]), size=50)
            y2 = np.random.multivariate_normal(mean=theta.squeeze(), cov = np.identity(theta.shape[0]), size=50)
            pdb.set_trace()
        return y



def theta_sampler_mc(i, dim, n,*args, **kwargs):
        """
        mc sampler for the prior generation of the tuberculosis example
        :param i: input counter, needed for rqmc initialisation
        :return: np.array of size 3, normalized theta
        """
        random_seed = random.randrange(10**9)
        np.random.seed(seed=random_seed)
        u = np.asarray(nr.uniform(size=dim*n).reshape((n,dim)))
        u = u*20-10
        # sample gamma dist, theta1 is birth event proba
        return u.transpose() # Normalize theta in the end

def theta_sampler_rqmc(i, dim, n,*args, **kwargs):
        """
        rqmc sampler for the prior generation of the tuberculosis example
        :param i: input counter, needed for rqmc initialisation
        :return: np.array of size 3, normalized theta
        """
        random_seed = random.randrange(10**9)

        u = np.array(randtoolbox.sobol(n=n, dim=dim, init=(i==0), scrambling=1, seed=random_seed)) # randtoolbox for sobol sequence
        # sample gamma dist, theta1 is birth event proba
        #print u
        u = u*20-10
        return u.transpose()

def delta(y_star, y):
    """
    Function to calculate the distance function of y and y star for the acceptance step
    :param y_star:  observed data
    :param y: simulated data
    :return: returns float difference according to distance function
    """
    dif_y = np.linalg.norm(y_star-y)
    return(dif_y)

def exclude_theta(theta_prop):
    """
    """
    if np.array([theta_prop< -10 , theta_prop>10 ]).any():
        return(0)
    else: return(1)

def check_consistency_theta(theta_prop):
    """
    function that checks the consistency of the proposed samples
    """
    pass


#N = 10 # number of particles
#initial_particles_mc = np.array([ theta_sampler_mc(0) for i in range(N)])
#y_star = np.array([0,0])
def f_y_star(dim=2):
    y_star = np.zeros(dim)
    return y_star
#y_star = np.array([0,0])

if __name__ == '__main__':
    import sys
    sys.path.append("/home/alex/python_programming/ABC/oo_sampler/functions")
    from functions_smc import *

    if True:
        ## test tuberculosis model
        multiple_y = 4
        N_particles = 2500
        epsilon = np.array([1.5,1,0.5,0.2, 0.1, 0.05, 0.02, 0.01])
    #    smc_abc_mc = smc_sampler_abc(epsilon, N_particles, delta, y_star, simulator, random_sequence_mc, uniform_kernel, 2)
    #    smc_abc_mc.initialize_sampler(theta_sampler_mc)
    #    smc_abc_mc.loop_over_time(move_theta)

        smc_abc_rqmc = smc_sampler_abc(epsilon, N_particles, delta, y_star, simulator, random_sequence_rqmc, gaussian_kernel, exclude_theta, dim_theta = 2, IS=True, multiple_y = multiple_y, hilbert=False, auto_eps = False, T_max= 200, target_ESS_factor = 0.3)
        smc_abc_rqmc.initialize_sampler(theta_sampler_rqmc)
        #import cProfile
        #cProfile.run('smc_abc_rqmc.loop_over_time(move_theta)')
        smc_abc_rqmc.loop_over_time(move_theta, save=False)
        theta_recovered = np.average( smc_abc_rqmc.thetas[:,:,-1], axis=1, weights= np.squeeze(smc_abc_rqmc.weights[:,:,-1]))
        print theta_recovered
        print smc_abc_rqmc.ESS
        print smc_abc_rqmc.epsilon
