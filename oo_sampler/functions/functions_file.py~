# -*- coding: utf-8 -*-
#import cProfile
import numpy.random as nr
#import matplotlib
import numpy as np
#import matplotlib.pyplot as plt

#import rpy2.robjects as robjects
import rpy2.robjects.packages as rpackages
from scipy.stats import itemfreq, gamma, norm
import random


randtoolbox = rpackages.importr('randtoolbox')

def simulator(theta):
        """
        Function that samples according to the birth death mutation process of Takana et al.
        :param theta: proposed parameter, obtained from the prior distribution simulation
        :param n_star: number of generated samples, in this function equal to one
        :return: freq_distinct_all : statistic for the observed genotype combination
        """
        # Normalize theta
        theta = theta/np.sum(theta)
        # defining the intial probabilities for the events
        N = 10000 # number of simulated events
        N_subsample = 473 # number of subsamples that will be studied
        # t = 1
        X = np.zeros((1,N)) # number of geneotypes vector (pop size)
        G = np.zeros((1,N)) # geneotypes vector
        X[:,0] = 1
        G[:,0] = 1
        W = X/float(np.sum(X)) # population weight vector
        icounter = 1
        death_counter = 0
        while icounter < N:
            selector_geneotype = nr.multinomial(1,W.ravel(),1)==1
            selector_event = nr.multinomial(1,theta,1)==1
            # birth procedure
            if selector_event[:,0]==True:
                    X = X+selector_geneotype*1.0
            # death procedure
            if selector_event[:,1]==True:
                    death_counter = death_counter+1
                    # check whether we do not kill the single individual
                    if np.sum(X-selector_geneotype*1)>0:
                        X = X-selector_geneotype*1
                        if X[np.nonzero(selector_geneotype*1)]==0:
                                G = G-selector_geneotype*1.0
                    else:
                        icounter = icounter-1
            if selector_event[:,2]==True:
                    # mutation : delete current value
                    select_index = np.argmin(X) # needs to be done before modifying the list !
                    X = X-selector_geneotype*1.0
                    if X[np.nonzero(selector_geneotype*1)]==0:
                            G = G-selector_geneotype*1.0
                    # mutation : addd new geneotype
                    G[:,select_index]= 1.0 # add geneotype
                    X[:,select_index]= 1.0
            # Update the probability vector
            W = X/float(np.sum(X))
            icounter = icounter+1
        X_reduced = np.int_(X[X>0])
        identificator = np.array([ i for i in range(0, np.size(X_reduced)) ]) # continue here
        disaggregated_X = np.repeat(identificator, X_reduced, axis=0)
        # if statement in case that the death rate is too high
        if np.size(disaggregated_X)<N_subsample:
            #print "Attention, death rate too high, do not have enough samples\n"
            N_subsample = np.size(disaggregated_X)
        random_pop = np.random.choice(disaggregated_X, size=N_subsample, replace=False) # get random population
        freq_distinct_geneotypes = itemfreq(random_pop) # get the frequency of distinct geneotypes
        #first column: identifier of geneotype, second column: number of counts of this geneotype
        freq_distinct_all = itemfreq(freq_distinct_geneotypes[:,1]) # aggregate the information from before, sum over unique geneotypes
        #first column: population size geneotype, second column: number of geneotypes with the same population size
        # this corresponds to size m of clusters k
        return freq_distinct_all

#theta = np.array([2,1,5], dtype=float)
#test_result = sample_function_test(theta, n_star=None)

def theta_sampler_mc(i=None):
        """
        mc sampler for the prior generation
        :param i: input counter, needed for rqmc initialisation
        :return: np.array of size 3, normalized theta
        """
        u = nr.uniform(size=3)
        #print u
        # sample gamma dist, theta1 is birth event proba
        theta1 = gamma.ppf(u[0], a=1, loc=0, scale=0.1)
        # theta2 is death, always smaller than death probability
        theta2 = theta1*u[1]
        # theta3 is mutation
        pmin = norm.cdf((-0.198/0.06735))
        theta3 = (0.198)+(norm.ppf((u[2]*(1-pmin)+pmin))*0.06735) # simulation of truncated normal
        theta = np.array([theta1, theta2, theta3])
        return theta/np.sum(theta)  # Normalize theta in the end

def theta_sampler_rqmc(i):
        """
        mc sampler for the prior generation
        :param i: input counter, needed for rqmc initialisation
        :return: np.array of size 3, normalized theta
        """
        random_seed = random.randrange(10**10)
        u = randtoolbox.sobol(n=1, dim=3, init=(i==1), scrambling=1, seed=random_seed) # randtoolbox for sobol sequence
        # sample gamma dist, theta1 is birth event proba
        #print u
        theta1 = gamma.ppf(u[0], a=1, loc=0, scale=0.1)
        # theta2 is death, always smaller than death probability
        theta2 = theta1*u[1]
        # theta3 is mutation
        pmin = norm.cdf((-0.198/0.06735))
        theta3 = (0.198)+(norm.ppf((u[2]*(1-pmin)+pmin))*0.06735) # simulation of truncated normal
        theta = np.array([theta1, theta2, theta3])
        return theta/np.sum(theta)

# define the true data

def delta(y_star, y):
    """
    Function to calculate the distance function of y and y star for the acceptance step
    :param y_star:  observed data
    :param y: simulated data
    :return: returns float difference according to distance function
    """
    g_star = np.sum(y_star[:,1]) # number of different geneotypes in true sample
    n_i_star = y_star[:,0]

    g = np.sum(y[:,1])      # number of different geneotypes in simulated sample
    n_i = y[:,0]
    N_subsample = 473 # size of sampled population
    eta_star = 1 - np.sum((n_i_star/473)**2)
    eta = 1 - np.sum((n_i/N_subsample)**2)
    dif_y = abs(eta-eta_star)+abs(g-g_star)/N_subsample
    return(dif_y)

#test = sample_function_test([1,0.1,1], n_star=None)
#print test
#print delta(1, test)
import cProfile
